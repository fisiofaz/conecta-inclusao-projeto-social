package com.conectainclusao.backend.service; 

import com.conectainclusao.backend.dto.ComplaintReportRequestDTO;
import com.conectainclusao.backend.dto.ComplaintReportResponseDTO;
import com.conectainclusao.backend.exception.ResourceNotFoundException; 
import com.conectainclusao.backend.model.ComplaintReport;
import com.conectainclusao.backend.model.User;
import com.conectainclusao.backend.model.StatusDenuncia;
import com.conectainclusao.backend.repository.ComplaintReportRepository;
import com.conectainclusao.backend.repository.UserRepository;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional; 

import java.util.List;
import java.util.stream.Collectors;

@Service
public class ComplaintReportService {

    private final ComplaintReportRepository complaintReportRepository;
    private final UserRepository userRepository;

    @Autowired
    public ComplaintReportService(ComplaintReportRepository complaintReportRepository, UserRepository userRepository) {
        this.complaintReportRepository = complaintReportRepository;
        this.userRepository = userRepository;
    }

    // --- LÃ³gica para CRIAR ---
    @Transactional
    // ðŸ‘‡ Recebe userId como Long ðŸ‘‡
    public ComplaintReportResponseDTO createComplaintReport(ComplaintReportRequestDTO dto, Long userId) { 
        ComplaintReport complaintReport = new ComplaintReport();
        
        // Copia propriedades do DTO (incluindo o Enum TipoProblema)
        BeanUtils.copyProperties(dto, complaintReport); 
        
        // ðŸ‘‡ Define o Status usando o Enum ðŸ‘‡
        complaintReport.setStatus(StatusDenuncia.ABERTO); 

        // ðŸ‘‡ Busca a entidade User pelo ID fornecido ðŸ‘‡
        User user = userRepository.findById(userId)
            .orElseThrow(() -> new ResourceNotFoundException("UsuÃ¡rio nÃ£o encontrado com ID: " + userId + " ao criar denÃºncia."));
        
        // ðŸ‘‡ Associa a entidade User completa Ã  denÃºncia ðŸ‘‡
        complaintReport.setUser(user); 

        ComplaintReport savedReport = complaintReportRepository.save(complaintReport);
        
        return mapEntityToResponseDTO(savedReport);
    }

    // --- LÃ³gica para LISTAR TODOS ---
    @Transactional(readOnly = true) // OtimizaÃ§Ã£o para operaÃ§Ãµes de leitura
    public List<ComplaintReportResponseDTO> getAllComplaintReports() {
        return complaintReportRepository.findAll().stream()
                .map(this::mapEntityToResponseDTO) // Usa o mÃ©todo de mapeamento
                .collect(Collectors.toList());
    }

    // --- LÃ³gica para BUSCAR POR ID ---
    @Transactional(readOnly = true)
    public ComplaintReportResponseDTO getComplaintReportById(Long id) {
        ComplaintReport report = complaintReportRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("DenÃºncia nÃ£o encontrada com ID: " + id));
        return mapEntityToResponseDTO(report);
    }

    // --- LÃ³gica para ATUALIZAR ---
    @Transactional
    public ComplaintReportResponseDTO updateComplaintReport(Long id, ComplaintReportRequestDTO dto) {
        ComplaintReport existingReport = complaintReportRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("DenÃºncia nÃ£o encontrada com ID: " + id));

        // Copia as propriedades do DTO para a entidade existente, ignorando o ID
        BeanUtils.copyProperties(dto, existingReport, "id");
        
        // PoderÃ­amos adicionar lÃ³gica aqui para nÃ£o permitir mudar o userId, por exemplo.
        // existingReport.setStatus(dto.getStatus()); // Se o status puder ser atualizado via DTO

        ComplaintReport updatedReport = complaintReportRepository.save(existingReport);
        return mapEntityToResponseDTO(updatedReport);
    }

    // --- LÃ³gica para DELETAR ---
    @Transactional
    public void deleteComplaintReport(Long id) {
        if (!complaintReportRepository.existsById(id)) {
            throw new ResourceNotFoundException("DenÃºncia nÃ£o encontrada com ID: " + id);
        }
        complaintReportRepository.deleteById(id);
    }

    // --- MÃ©todo auxiliar para mapear Entidade -> ResponseDTO ---
    private ComplaintReportResponseDTO mapEntityToResponseDTO(ComplaintReport report) {
        ComplaintReportResponseDTO dto = new ComplaintReportResponseDTO();
        
        // BeanUtils deve copiar os Enums TipoProblema e StatusDenuncia corretamente
        BeanUtils.copyProperties(report, dto, "user"); // Ignora o campo 'user' da entidade

        // ðŸ‘‡ ObtÃ©m o nome diretamente do objeto User relacionado ðŸ‘‡
        String userName = "UsuÃ¡rio Desconhecido"; // PadrÃ£o
        if (report.getUser() != null) {
            userName = report.getUser().getNome(); // Acessa o nome atravÃ©s do relacionamento
        }
        dto.setUserName(userName); // Define o nome do usuÃ¡rio no DTO

        return dto;
    }
}